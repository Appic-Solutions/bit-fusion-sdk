type Interval = variant {
  PerHour;
  PerWeek;
  PerDay;
  Period : record { seconds : nat64 };
  PerMinute;
};
type MetricsData = record {
  stable_memory_size : nat64;
  cycles : nat64;
  heap_memory_size : nat64;
};
type MetricsMap = record {
  map : vec record { nat64; MetricsData };
  interval : Interval;
  history_length_nanos : nat64;
};
type MetricsStorage = record { metrics : MetricsMap };
type Result = variant { Ok : nat; Err : TransferFromError };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
service : (principal) -> {
  get_curr_metrics : () -> (MetricsData) query;
  get_metrics : () -> (MetricsStorage) query;
  finish_icrc2_mint : (principal, principal, vec nat8, nat, nat) -> (Result);
}
