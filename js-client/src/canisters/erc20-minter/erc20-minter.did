type BridgeSide = variant { Base; Wrapped };
type EvmLink = variant { Ic : principal; Http : text };
type Interval = variant {
  PerHour;
  PerWeek;
  PerDay;
  Period : record { seconds : nat64 };
  PerMinute;
};
type LogSettings = record {
  log_filter : opt text;
  in_memory_records : opt nat64;
  enable_console : bool;
};
type MetricsData = record {
  stable_memory_size : nat64;
  cycles : nat64;
  heap_memory_size : nat64;
};
type MetricsMap = record {
  map : vec record { nat64; MetricsData };
  interval : Interval;
  history_length_nanos : nat64;
};
type MetricsStorage = record { metrics : MetricsMap };
type Settings = record {
  signing_strategy : SigningStrategy;
  base_bridge_contract : text;
  wrapped_bridge_contract : text;
  wrapped_evm_link : EvmLink;
  log_settings : opt LogSettings;
  base_evm_link : EvmLink;
};
type SigningKeyId = variant { Dfx; Production; Test; PocketIc; Custom : text };
type SigningStrategy = variant {
  Local : record { private_key : vec nat8 };
  ManagementCanister : record { key_id : SigningKeyId };
};
service : (Settings) -> {
  get_curr_metrics : () -> (MetricsData) query;
  get_metrics : () -> (MetricsStorage) query;
  admin_set_bft_bridge_address : (BridgeSide, text) -> (opt null);
  get_evm_address : () -> (opt text);
  get_mint_order : (vec nat8, vec nat8, nat32) -> (opt vec nat8) query;
  list_mint_orders : (vec nat8, vec nat8) -> (
      vec record { nat32; vec nat8 },
    ) query;
}
