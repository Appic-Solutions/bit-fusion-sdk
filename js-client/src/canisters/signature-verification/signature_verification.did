type AccessListItem = record { storageKeys : vec text; address : text };
type BuildData = record {
  rustc_semver : text;
  git_branch : text;
  pkg_version : text;
  cargo_target_triple : text;
  cargo_debug : text;
  pkg_name : text;
  cargo_features : text;
  build_timestamp : text;
  git_sha : text;
  git_commit_timestamp : text;
};
type Interval = variant {
  PerHour;
  PerWeek;
  PerDay;
  Period : record { seconds : nat64 };
  PerMinute;
};
type MetricsData = record {
  stable_memory_size : nat64;
  cycles : nat64;
  heap_memory_size : nat64;
};
type MetricsMap = record {
  map : vec record { nat64; MetricsData };
  interval : Interval;
  history_length_nanos : nat64;
};
type MetricsStorage = record { metrics : MetricsMap };
type Result = variant { Ok; Err : SignatureVerificationError };
type Result_1 = variant { Ok : text; Err : SignatureVerificationError };
type SignatureVerificationError = variant {
  RecoveryError : record { recovered : text; expected : text };
  Unauthorized;
  InternalError : text;
};
type Transaction = record {
  r : text;
  s : text;
  v : text;
  to : opt text;
  gas : text;
  maxFeePerGas : opt text;
  gasPrice : opt text;
  value : text;
  blockNumber : opt text;
  from : text;
  hash : text;
  blockHash : opt text;
  "type" : opt text;
  accessList : opt vec AccessListItem;
  transactionIndex : opt text;
  nonce : text;
  maxPriorityFeePerGas : opt text;
  input : text;
  chainId : opt text;
};
service : (vec principal) -> {
  get_curr_metrics : () -> (MetricsData) query;
  get_metrics : () -> (MetricsStorage) query;
  add_access : (principal) -> (Result);
  get_access_list : () -> (vec principal) query;
  get_canister_build_data : () -> (BuildData) query;
  get_owner : () -> (principal) query;
  remove_access : (principal) -> (Result);
  set_owner : (principal) -> (Result);
  verify_signature : (Transaction) -> (Result_1) query;
}
